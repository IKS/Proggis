# This graph monitors the CouchDB changes API for new execution
# documents of state data_received containing attachment
# effortfigures.xlsx. This spreadsheet then gets passed to
# three importers:
#
# * ReadEffortFigures: get budgeted efforts per participant
# * ReadWorkPlan: get budgeted efforts per quarter
# * ReadSpentEfforts: get spent efforts per participant per quarter

# CouchDB database setup
'http://localhost:5984/default' -> URL Conn(WebService/CouchDB/OpenDatabase)
Conn() CONNECTION -> CONNECTION New(WebService/CouchDB/GetChanges)
Conn() CONNECTION -> CONNECTION ReadAtt(WebService/CouchDB/ReadDocumentAttachment)
Conn() CONNECTION -> CONNECTION ReadDoc(WebService/CouchDB/ReadDocument)

# Watch for changes
'filter=Proggis/byType' -> OPTION New()
'type=execution' -> OPTION New()
'state=data_received' -> OPTION New()
'workflow=EffortControlling' -> OPTION New()
'id' -> KEY GetId(GetObjectKey)

# Get the execution document when it appears
New() OUT -> IN GetId() OUT -> IN ReadDoc() OUT -> IN SplitDoc(Split)

# Read attachment from execution document and write to local file
'0' -> ATTACHMENT ReadAtt()
'effortfigures.xlsx' -> FILENAME WriteFile(WriteFileRaw)
SplitDoc() OUT -> DOCUMENT ReadAtt() OUT -> IN WriteFile() FILENAME -> IN SplitFileName(Split)

# Load effort figures into database
'ReadEffortFigures.fbp' -> GRAPH EffortFigures(Graph)
Conn() CONNECTION -> CONNECTION.IN EffortFigures()
SplitDoc() OUT -> EXECDOC.IN EffortFigures()
SplitFileName() OUT -> FILENAME.IN EffortFigures()

# Load workplan into database
'ReadWorkplan.fbp' -> GRAPH Workplan(Graph)
Conn() CONNECTION -> CONNECTION.IN Workplan()
SplitDoc() OUT -> EXECDOC.IN Workplan()
SplitFileName() OUT -> FILENAME.IN Workplan()

# Load spent efforts into database
'ReadSpentEfforts.fbp' -> GRAPH SpentEfforts(Graph)
Conn() CONNECTION -> CONNECTION.IN SpentEfforts()
SplitDoc() OUT -> EXECDOC.IN SpentEfforts()
SplitFileName() OUT -> FILENAME.IN SpentEfforts()
