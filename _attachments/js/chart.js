// Generated by CoffeeScript 1.3.1
(function() {
  var Proggis, _ref;

  Proggis = (_ref = window.Proggis) != null ? _ref : window.Proggis = {};

  Proggis.Chart = {
    chartObject: null,
    data: null,
    legend: function(chart, element) {
      var legend, listItems, name;
      legend = chart.getLegend();
      listItems = [];
      for (name in legend) {
        listItems.push("<span class='box-color' style='background-color:" + legend[name] + "'>&nbsp;</span>" + name);
      }
      return element.html("<div>" + listItems.join("</div><div>") + "</div>");
    },
    legendClear: function(element) {
      return element.html("");
    },
    loadChart: function(viewName, groupLevel, filterParam) {
      var update, uri,
        _this = this;
      uri = "_list/chart/" + viewName + "?group=true";
      update = false;
      uri += "&group_level=" + groupLevel;
      if (filterParam) {
        uri += "&task_filter=" + filterParam;
        update = true;
      } else {

      }
      $.getJSON(uri, function(json, textStatus, xhr) {
        _this.data = json;
        if (update) {
          _this.chartObject.loadJSON(json);
        } else {
          _this.chartObject.loadJSON(json);
        }
        return _this.legend(_this.chartObject, $(".legend"));
      });
      return this.legendClear($(".legend"));
    },
    loadFlotChart: function(viewName, groupLevel, filterParam) {
      var update, uri,
        _this = this;
      document.getElementById("visualization").innerHTML = "";
      uri = "_list/chart/" + viewName + "?group=true";
      update = false;
      uri += "&group_level=" + groupLevel;
      if (filterParam) {
        uri += "&task_filter=" + filterParam;
        update = true;
      } else {

      }
      return $.getJSON(uri, function(json, textStatus, xhr) {
        var ctx, diffDays, diffMilliseconds, oneDay, options, plotNow, plotOptions, plotnowOffset, previousPoint, projectStart, showTooltip, vals;
        _this.data = json;
        options = {
          lines: {
            show: true
          },
          points: {
            show: true
          },
          xaxis: {
            tickDecimals: 0,
            tickSize: 1
          }
        };
        vals = json.values;
        plotOptions = {
          series: {
            lines: {
              show: true
            },
            points: {
              show: true
            }
          },
          legend: {
            show: true,
            container: ".legend",
            labelBoxBorderColor: "white",
            textColor: "white",
            backgroundColor: "black"
          },
          grid: {
            color: "#888",
            hoverable: true,
            clickable: true
          },
          xaxis: vals.xaxis,
          yaxis: vals.yaxis
        };
        _this.chartObject = $.plot(Proggis.visualization, [
          {
            data: vals.plan,
            label: "Planned effort",
            yaxis: 1
          }, {
            data: vals.spent,
            yaxis: 1,
            label: "Spent effort"
          }, {
            data: vals.deliverablePlan,
            label: "Planned Deliverables",
            yaxis: 2
          }, {
            data: vals.deliverableComplete,
            label: "Completed Deliverables",
            yaxis: 2
          }
        ], plotOptions);
        projectStart = new Date(2009, 0, 0);
        oneDay = 1000 * 60 * 60 * 24;
        diffMilliseconds = new Date() - projectStart;
        diffDays = diffMilliseconds / oneDay;
        plotNow = diffDays / vals.xtickDays;
        plotnowOffset = _this.chartObject.pointOffset({
          x: plotNow,
          y: 50
        });
        console.log("plotnowOffset:", plotnowOffset);
        Proggis.visualization.append("<div style='position:absolute;left:" + (plotnowOffset.left + 4) + "px;top:" + plotnowOffset.top + "px;\ncolor:red;font-size:smaller'>Today</div>");
        ctx = _this.chartObject.getCanvas().getContext("2d");
        ctx.beginPath();
        ctx.strokeStyle = "#f00";
        ctx.moveTo(plotnowOffset.left, 0);
        ctx.lineTo(plotnowOffset.left, ctx.canvas.height);
        ctx.stroke();
        showTooltip = function(x, y, contents) {
          return jQuery("<div id=\"tooltip\">" + contents + "</div>").css({
            position: "absolute",
            display: "none",
            top: y + 5,
            left: x + 5,
            border: "1px solid #fdd",
            padding: "2px",
            "background-color": "#322",
            opacity: 0.80
          }).appendTo("body").fadeIn(200);
        };
        previousPoint = null;
        return Proggis.visualization.bind("plothover", function(event, pos, item) {
          var x, xLabel, y;
          jQuery("#x").text(pos.x.toFixed(2));
          jQuery("#y").text(pos.y.toFixed(2));
          if (item) {
            if (previousPoint !== item.dataIndex) {
              previousPoint = item.dataIndex;
              jQuery("#tooltip").remove();
              x = item.datapoint[0].toFixed(2);
              y = item.datapoint[1].toFixed(2);
              xLabel = item.series.xaxis.ticks ? item.series.xaxis.ticks[Number(x)].label : x;
              return showTooltip(item.pageX, item.pageY, item.series.label + " of " + xLabel + " = " + y);
            }
          } else {
            $("#tooltip").remove();
            return previousPoint = null;
          }
        });
      });
    },
    init: function(chartType, onClickHandler) {
      var config;
      document.getElementById("visualization").innerHTML = "";
      config = {
        injectInto: "visualization",
        Events: {
          enable: true,
          onClick: onClickHandler
        },
        animate: true,
        Margin: {
          top: 5,
          left: 5,
          right: 5,
          bottom: 20
        },
        showAggregates: true,
        showLabels: true,
        type: "stacked:gradient",
        Label: {
          type: "HTML",
          size: 13,
          family: "Arial",
          color: "white"
        },
        Tips: {
          enable: true,
          onShow: function(tip, elem) {
            return tip.innerHTML = "<b>" + elem.name + "</b>: " + elem.value;
          }
        },
        restoreOnRightClick: true
      };
      switch (chartType) {
        case "AreaChart":
          config.labelOffset = 10;
          return this.chartObject = new $jit.AreaChart(config);
        case "BarChart":
          config.labelOffset = 5;
          config.orientation = 'vertical';
          return this.chartObject = new $jit.BarChart(config);
        case "LineChart":
          this.options = {
            lines: {
              show: true
            },
            points: {
              show: true
            },
            xaxis: {
              tickDecimals: 0,
              tickSize: 1
            }
          };
          return this.chartObject = $.plot;
      }
    }
  };

}).call(this);
