// Generated by CoffeeScript 1.3.1
(function() {
  var Project,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Project = (function() {

    Project.name = 'Project';

    function Project() {
      this.prefix = 'http://iks-project.eu';
      this.transactionID = 'asdfqwerDFHG2345';
      this.clear();
    }

    Project.prototype.clear = function() {
      this.project = void 0;
      this.effortunit = '';
      this.projectstart = '';
      this.timeunit = '';
      this.projectduration = '';
      this.timeslots = [];
      this.partners = [];
      this.tasks = [];
      this.taskpartnereffortallocations = [];
      this.tasktimeeffortallocations = [];
      this.spentefforttaskpartnertime = [];
      return this.deliverables = [];
    };

    Project.prototype.validate = function() {
      var alloc, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      _ref = this.taskpartnereffortallocations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        alloc = _ref[_i];
        if (_ref1 = alloc[1], __indexOf.call(this.getPartnerInitials(), _ref1) < 0) {
          this.validationError(["Undefined partner '" + alloc[1] + "' in taskpartnereffortallocations", alloc]);
        }
      }
      _ref2 = this.spentefforttaskpartnertime;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        alloc = _ref2[_j];
        if (_ref3 = alloc[1], __indexOf.call(this.getPartnerInitials(), _ref3) < 0) {
          this.validationError(["Undefined partner '" + alloc[1] + "' in spentefforttaskpartnertime", alloc]);
        }
      }
      _ref4 = this.deliverables;
      _results = [];
      for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
        alloc = _ref4[_k];
        if (_ref5 = alloc[3], __indexOf.call(this.getPartnerInitials(), _ref5) < 0) {
          _results.push(this.validationError(["Undefined partner '" + alloc[3] + "' in deliverables", alloc]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Project.prototype.getCouchdbDocuments = function() {
      var alloc, assignee, deliv, description, dissem, effort, efforts, firstTimeslot, i, milestone, name, nature, partner, rdivm, res, spentEntry, task, timeslot, wbs, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      res = {};
      _ref = this.partners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        partner = _ref[_i];
        res[partner[0]] = {
          "@type": "organization",
          "_id": partner[0],
          "foaf:country": partner[1],
          "foaf:name": partner[0],
          "source": this.transactionID
        };
      }
      _ref1 = this.timeslots;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        timeslot = _ref1[_j];
        res[timeslot] = {
          "@type": "timeslot",
          "_id": timeslot,
          "name": timeslot,
          "source": this.transactionID
        };
      }
      _ref2 = this.tasks;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        task = _ref2[_k];
        wbs = task[0];
        res["" + this.prefix + "/task/" + wbs] = {
          "@type": "task",
          "_id": "" + this.prefix + "/task/" + wbs,
          "name": task[1],
          "source": this.transactionID
        };
      }
      _ref3 = this.taskpartnereffortallocations;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        alloc = _ref3[_l];
        wbs = alloc[0];
        partner = alloc[1];
        effort = alloc[2];
        res["" + this.prefix + "/task/" + wbs + "/" + partner] = {
          "@type": "effortallocation",
          "_id": "" + this.prefix + "/task/" + wbs + "/" + partner,
          "value": effort,
          "task": "" + this.prefix + "/task/" + wbs,
          "assignee": partner,
          "source": this.transactionID
        };
      }
      _ref4 = this.tasktimeeffortallocations;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        alloc = _ref4[_m];
        wbs = alloc[0];
        timeslot = alloc[1];
        effort = alloc[2];
        res["" + this.prefix + "/task/" + wbs + "/" + timeslot] = {
          "@type": "effortallocation",
          "_id": "" + this.prefix + "/task/" + wbs + "/" + timeslot,
          "value": effort,
          "task": "" + this.prefix + "/task/" + wbs,
          "timeslot": timeslot,
          "source": this.transactionID
        };
      }
      _ref5 = this.spentefforttaskpartnertime;
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        spentEntry = _ref5[_n];
        wbs = spentEntry[0];
        partner = spentEntry[1];
        firstTimeslot = spentEntry[2];
        efforts = spentEntry.splice(3);
        for (i = _o = 0, _len6 = efforts.length; _o < _len6; i = ++_o) {
          effort = efforts[i];
          timeslot = this.timeslots[this.timeslots.indexOf(firstTimeslot) + i];
          res["" + this.prefix + "/task/" + wbs + "/" + partner + "/" + timeslot] = {
            "@type": "effort",
            "_id": "" + this.prefix + "/task/" + wbs + "/" + partner + "/" + timeslot,
            "value": effort,
            "task": "" + this.prefix + "/task/" + wbs,
            "timeslot": timeslot,
            "assignee": partner,
            "source": this.transactionID
          };
        }
      }
      _ref6 = this.deliverables;
      for (_p = 0, _len7 = _ref6.length; _p < _len7; _p++) {
        deliv = _ref6[_p];
        wbs = deliv[0];
        name = deliv[1];
        description = deliv[2];
        assignee = deliv[3];
        milestone = deliv[4];
        effort = deliv[5];
        dissem = deliv[6];
        nature = deliv[7];
        rdivm = deliv[8];
        res["" + this.prefix + "/deliverable/" + wbs] = {
          "@type": "deliverable",
          "_id": "" + this.prefix + "/deliverable/" + wbs,
          "name": name,
          "assignee": assignee,
          "milestone": milestone,
          "dissem": dissem,
          "nature": nature,
          "effort": effort,
          "description": description,
          "rdivm": rdivm,
          "source": this.transactionID
        };
      }
      return res;
    };

    Project.prototype.getTaskWbss = function() {
      return _(this.tasks).map(function(t) {
        return t[0];
      });
    };

    Project.prototype.getPartnerInitials = function() {
      return _(this.partners).map(function(p) {
        return p[0];
      });
    };

    Project.prototype.parse = function(projectDefinition) {
      var line, lineNr, lines, splitArray, timeslot, _i, _j, _len, _ref;
      lines = projectDefinition.split('\n');
      for (lineNr = _i = 0, _len = lines.length; _i < _len; lineNr = ++_i) {
        line = lines[lineNr];
        this.lineNr = lineNr;
        splitArray = line.match(/[\w\d\.]+|"[^"]+"/g);
        splitArray = _(splitArray).map(function(s) {
          return s.replace(/^["']|["']$/g, '');
        });
        this.parseLine(splitArray);
      }
      console.info("Parsing complete.");
      if (this.timeunit === 'quarters') {
        for (timeslot = _j = 0, _ref = Number(this.projectduration) - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; timeslot = 0 <= _ref ? ++_j : --_j) {
          this.timeslots.push("Y" + (Math.floor(timeslot / 4) + 1) + "Q" + (timeslot % 4 + 1));
        }
      }
      return this.validate();
    };

    Project.prototype.parseLine = function(line) {
      if (line.length === 0) {
        this.reset();
        return;
      }
      if (this.mode) {
        this[this.mode].push(line);
        return;
      }
      switch (line[0].toLowerCase()) {
        case "set":
          this[line[1]] = line[2];
          return;
        case "insert":
          if (!line[1]) {
            console.info("SET needs a parameter (e.g. PARTNERS)");
          }
          this.setMode(line[1].toLowerCase());
          return;
      }
      return console.info("Nothing is matching the line", line);
    };

    Project.prototype.setMode = function(newMode) {
      if (typeof this[newMode] === 'undefined') {
        this.parseError("Mode '" + newMode + "' is not defined!");
      }
      return this.mode = newMode;
    };

    Project.prototype.reset = function() {
      return this.mode = "";
    };

    Project.prototype.parseError = function(msg) {
      return console.error("Line " + (this.lineNr + 1), "PARSE ERROR: ", msg);
    };

    Project.prototype.validationError = function(args) {
      return console.error.apply(this, ["Validation ERROR:"].concat(args));
    };

    Project.prototype.list = function() {
      var p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
      console.info("Listing project " + this.project);
      console.info("Partners:");
      _ref = this.partners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        console.info(p);
      }
      console.info("tasks:");
      _ref1 = this.tasks;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        console.info(p);
      }
      console.info("taskpartnereffortallocations:");
      _ref2 = this.taskpartnereffortallocations;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        console.info(p);
      }
      console.info("tasktimeeffortallocations:");
      _ref3 = this.tasktimeeffortallocations;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        p = _ref3[_l];
        console.info(p);
      }
      console.info("spentefforttaskpartnertime:");
      _ref4 = this.spentefforttaskpartnertime;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        p = _ref4[_m];
        console.info(p);
      }
      console.info("deliverables:");
      _ref5 = this.deliverables;
      _results = [];
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        p = _ref5[_n];
        _results.push(console.info(p));
      }
      return _results;
    };

    Project.prototype.saveData = function(log) {
      var _this = this;
      return this.getDB(function(db) {
        var data, doc, key, _results;
        console.info("this is our db", db);
        data = _this.getCouchdbDocuments();
        _results = [];
        for (key in data) {
          doc = data[key];
          _results.push(db.saveDoc(doc, {
            success: function(res) {
              console.info("" + key + " saved successfully", res);
              console.info("Replicate");
              return jQuery.couch.replicate('proggis20', _this.project, {
                success: function(res) {
                  console.info("Replication is also done", res);
                  return log("Now you can visit <a href='" + db.uri + "_design/Proggis2/index.html' target='_blank'>Proggis " + _this.project + "</a> ");
                }
              }, {
                doc_ids: ['_design/Proggis2']
              });
            }
          }));
        }
        return _results;
      });
    };

    Project.prototype.getDB = function(cb) {
      var db,
        _this = this;
      db = jQuery.couch.db(this.project);
      return db.info({
        success: function(info) {
          console.info("DB exists already:", _this.project, info);
          return cb(db);
        },
        error: function(err, msg) {
          if (err === 404) {
            console.info("DB " + _this.id + " doesn't exist yet, creating");
            return db.create({
              success: function(info) {
                return cb(db);
              }
            });
          }
        }
      });
    };

    Project.prototype.deleteDB = function(log) {
      var db;
      db = jQuery.couch.db(this.project);
      return db.drop({
        success: function(res) {
          console.info('Deleting DB ' + db.name + ' successfully.', res);
          return typeof log === "function" ? log('Deleting DB ' + db.name + ' successfully.') : void 0;
        },
        error: function(code, msg) {
          return typeof log === "function" ? log("Error deleting: '" + msg + "'") : void 0;
        }
      });
    };

    return Project;

  })();

  /*
  project = new Project
  fs.readFile process.argv[2], 'utf-8', (err, text) =>
    if err
      console.error err
  
    # Parse, then list parsed information
    project.parse text
    project.list()
    console.info project.getCouchdbDocuments()
    project.saveData()
  */


  this.Project = Project;

}).call(this);
